{"version":3,"sources":["components/Quote.jsx","pages/HomePage.jsx","App.js","index.js"],"names":["Quote","content","quote","author","className","HomePage","useState","quotes","setQuotes","setQuote","loading","setLoading","quoteHistory","setQuoteHistory","useEffect","a","fetch","then","res","json","data","getRandomQuote","catch","e","console","log","fetchData","quoteData","quoteToDisplay","Math","floor","random","length","onClick","quoteArr","pop","disabled","style","cursor","App","ReactDOM","render","document","getElementById"],"mappings":"2SAGaA,EAAQ,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACdC,EAAkBD,EAAlBC,MAAOC,EAAWF,EAAXE,OACf,OACE,6BAAYC,UAAU,gBAAtB,UACGF,EACD,+BAAOC,QCJAE,G,MAAW,WAAO,IAAD,EACAC,mBAAS,IADT,mBACrBC,EADqB,KACbC,EADa,OAEFF,qBAFE,mBAErBJ,EAFqB,KAEdO,EAFc,OAGEH,oBAAS,GAHX,mBAGrBI,EAHqB,KAGZC,EAHY,OAIYL,mBAAS,IAJrB,mBAIrBM,EAJqB,KAIPC,EAJO,KAM5BC,qBAAU,YACO,uCAAG,sBAAAC,EAAA,6DAChBJ,GAAW,GADK,SAEVK,MACJ,yIAECC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLZ,EAAUY,GACVT,GAAW,GACXU,EAAeD,MAEhBE,OAAM,SAACC,GAAD,OAAOC,QAAQC,IAAIF,MAXZ,2CAAH,qDAcfG,KACC,IAEH,IAAML,EAAiB,SAACM,GAClBzB,GACFW,EAAgB,GAAD,mBAAKD,GAAL,CAAmBV,KAIpC,IADA,IAAI0B,EAAiBD,EAAUE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAUK,UACzD,OAAL9B,QAAK,IAALA,OAAA,EAAAA,EAAOA,SAAU0B,EAAe1B,OACpC0B,EAAiBD,EAAUE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAUK,SAGlEvB,EAASmB,IAaX,OAAIlB,EACK,6CAIP,qBAAKN,UAAU,YAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,sBAAKA,UAAU,kBAAf,UACE,wBAAQ6B,QAAS,kBAAMZ,EAAed,IAAtC,oBACA,wBACE0B,QApBkB,WAC1B,GAAIrB,EAAaoB,OAAS,EAAG,CAC3B,IAAME,EAAWtB,EACjBH,EAASyB,EAASC,OAClBtB,EAAgBqB,QAEhBV,QAAQC,IAAI,6BAeNW,WAAUxB,EAAaoB,OAAS,GAChCK,MAAOzB,EAAaoB,OAAS,EAAI,KAAM,CAACM,OAAQ,eAHlD,+BAQF,qBAAKlC,UAAU,UAAf,SACGF,GACC,8BACE,cAAC,EAAD,CAAOD,QAASC,eC5DfqC,MARf,WACE,OACE,qBAAKnC,UAAU,MAAf,SACE,cAAC,EAAD,OCDNoC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.d9cde705.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/quote.css\";\r\n\r\nexport const Quote = ({ content }) => {\r\n  const { quote, author } = content;\r\n  return (\r\n    <blockquote className=\"quote-wrapper\">\r\n      {quote}\r\n      <cite>{author}</cite>\r\n    </blockquote>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Quote } from \"../components/Quote\";\r\nimport \"../styles/homePage.css\";\r\n\r\nexport const HomePage = () => {\r\n  const [quotes, setQuotes] = useState([]);\r\n  const [quote, setQuote] = useState();\r\n  const [loading, setLoading] = useState(true);\r\n  const [quoteHistory, setQuoteHistory] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      await fetch(\r\n        \"https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json\"\r\n      )\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          setQuotes(data);\r\n          setLoading(false);\r\n          getRandomQuote(data);\r\n        })\r\n        .catch((e) => console.log(e));\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const getRandomQuote = (quoteData) => {\r\n    if (quote) {\r\n      setQuoteHistory([...quoteHistory, quote]);\r\n    }\r\n\r\n    let quoteToDisplay = quoteData[Math.floor(Math.random() * quoteData.length)];\r\n    while(quote?.quote === quoteToDisplay.quote) {\r\n      quoteToDisplay = quoteData[Math.floor(Math.random() * quoteData.length)];\r\n    }\r\n\r\n    setQuote(quoteToDisplay);\r\n  };\r\n\r\n  const getLastHistoryQuote = () => {\r\n    if (quoteHistory.length > 0) {\r\n      const quoteArr = quoteHistory;\r\n      setQuote(quoteArr.pop());\r\n      setQuoteHistory(quoteArr);\r\n    } else {\r\n      console.log(\"No data in quote history\");\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"max-width\">\r\n      <div className=\"content-wrapper\">\r\n        <div className=\"buttons-wrapper\">\r\n          <button onClick={() => getRandomQuote(quotes)}>random</button>\r\n          <button\r\n            onClick={getLastHistoryQuote}\r\n            disabled={quoteHistory.length > 0 ? false : true}\r\n            style={quoteHistory.length > 0 ? null: {cursor: \"not-allowed\"}}\r\n          >\r\n            previous quote\r\n          </button>\r\n        </div>\r\n        <div className=\"content\">\r\n          {quote && (\r\n            <div>\r\n              <Quote content={quote} />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import \"./App.css\";\nimport { HomePage } from \"./pages/HomePage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HomePage />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}